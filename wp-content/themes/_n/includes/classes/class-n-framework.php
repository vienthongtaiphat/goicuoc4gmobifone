<?php
/**
 * N Framework
 *
 * WARNING: This file is part of the core N Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @since 0.0.1
 * @package    N
 * @subpackage N/includes/classes
 */

if (!defined('ABSPATH')):
	exit; // Exit if accessed directly.
endif;

/**
 * N Framework class
 *
 * @since      0.0.1
 */
class NFramework {

	/**
	 * Get an instance of the class.
	 *
	 * @since 0.0.1
	 */
	public static function get(){
		return new NFramework();
	}

	/**
	 * Get the framework.
	 *
	 * @since 0.0.1
	 */
	public function get_framework(){
		$this->generate();
	}

	/**
	 * Generate the template.
	 *
	 * @since 0.0.1
	 */
	private function generate(){
		$conditionals = [
			'is_home',
			'is_front_page',
			'is_404',
			'is_search',
			'is_attachment',
			'is_shop',
			'is_product',
			'is_page_template',
			'is_singular',
			'is_product_category',
			'is_product_tag',
			'is_post_type_archive',
			'is_category',
			'is_tag',
			'is_tax',
			'is_date',
			'is_author',
		];

		$this->_n_add_templates_header();

		/**
		 * Fires before the content, after the content sidebar wrap opening markup.
		 */
		do_action('_n_before_content');

		_n_markup([
			'open'    => '<main %s>',
			'context' => 'n-site-main',
			'attrs'   => [
				'id' => 'primary',
			]
		]);

		/**
		 * Fires before the loop hook, after the main content opening markup.
		 */
		do_action('_n_before_loop');

		foreach ($conditionals as $conditional):
			if (function_exists($conditional) && call_user_func($conditional)):
				call_user_func([$this, '_n_add_templates_' . substr($conditional, 3)]);
				break;
			endif;
		endforeach;

		/**
		 * Fires after the loop hook, before the main content closing markup.
		 */
		do_action('_n_after_loop');

		_n_markup([
			'close'   => '</main>',
			'context' => 'n-site-main',
		]);

		/**
		 * Fires after the content, before the main content sidebar wrap closing markup.
		 */
		do_action('_n_after_content');

		$this->_n_add_templates_footer();
	}

	/**
	 * Add header templates.
	 *
	 * @since 0.0.1
	 */
	private function _n_add_templates_header(){
		/**
		 * Kích hoạt khi bắt đầu header.php, để hiển thị nội dung Doctype.
		 */
		do_action('_n_doctype');

		/**
		 * Thẻ meta
		 */
		do_action('_n_meta');

		wp_head(); //We need this for plugins

		echo '</head>';

		_n_markup([
			'open'    => '<body %s>',
			'context' => 'body',
			'attrs'   => [
				'class' => esc_attr(implode(' ', get_body_class())),
			]
		]);

		if (function_exists('wp_body_open')):
			wp_body_open();
		endif;

		/**
		 * Fires immediately after the `wp_body_open` action hook.
		 */
		do_action('_n_before');

		_n_markup([
			'open'    => '<div %s>',
			'context' => 'page',
			'attrs'   => [
				'class' => 'site',
				'id'    => 'page',
			]
		]);

		/**
		 * Fires immediately after the site container opening markup, before `_n_header` action hook.
		 */
		do_action('_n_before_header');

		_n_markup([
			'open'    => '<header %s>',
			'context' => 'n-site-header',
			'attrs'   => [
				'id' => 'masthead',
			]
		]);

		/**
		 * Fires to display the main header content.
		 */
		do_action('_n_header');

		_n_markup([
			'close'   => '</header>',
			'context' => 'n-site-header',
		]);

		/**
		 * Fires immediately after the `_n_header` action hook, before the site inner opening markup.
		 */
		do_action('_n_after_header');
	}

	/**
	 * Add footer templates.
	 *
	 * @since 0.0.1
	 */
	private function _n_add_templates_footer(){
		/**
		 * Fires immediately after the site inner closing markup, before `_n_footer` action hook.
		 */
		do_action('_n_before_footer');

		_n_markup([
			'open'    => '<footer %s>',
			'context' => 'n-site-footer',
			'attrs'   => [
				'id' => 'colophon',
			]
		]);

		/**
		 * Fires to display the main footer content.
		 */
		do_action('_n_footer');

		_n_markup([
			'close'   => '</footer>',
			'context' => 'n-site-footer',
		]);

		/**
		 * Fires immediately after the `_n_footer` action hook, before the site container closing markup.
		 */
		do_action('_n_after_footer');

		_n_markup([
			'close'   => '</div>',
			'context' => 'page',
		]);

		/**
		 * Fires immediately before wp_footer(), after the site container closing markup.
		 */
		do_action('_n_after');

		wp_footer(); // We need this for plugins.

		_n_markup([
			'close'   => '</body>',
			'context' => 'body',
		]);

		echo '</html>';
	}

	/**
	 * Is home template.
	 *
	 * @since 0.0.1
	 */
	private function _n_add_templates_home(){
		do_action('_n_home');
	}

	/**
	 * Is front template.
	 *
	 * @since 0.0.1
	 */
	private function _n_add_templates_front_page(){
		do_action('_n_front');
	}

	/**
	 * 404 template.
	 *
	 * @since 0.0.1
	 */
	private function _n_add_templates_404(){
		do_action('_n_404');
	}

	/**
	 * Search results template.
	 *
	 * @since 0.0.1
	 */
	private function _n_add_templates_search($post_type = null){
		if (!$post_type):
			$post_type = $GLOBALS['wp_query']->get('post_type');
		endif;

		$type_object = get_post_type_object($post_type);

		if (!empty($type_object->has_archive)):
			do_action('_n_search_' . $post_type);
		else:
			do_action('_n_search');
		endif;
	}

	/**
	 * Attachment template.
	 *
	 * @since 0.0.1
	 */
	private function _n_add_templates_attachment(){
		do_action('_n_attachment');
	}

	/**
	 * Single product template.
	 *
	 * @since 0.0.1
	 */
	private function _n_add_templates_product(){
		do_action('_n_single_product');
	}

	/**
	 * Page template.
	 *
	 * @since 0.0.1
	 */
	private function _n_add_templates_page_template($post_id = 0){
		$post = !$post_id ? $GLOBALS['post'] : get_post($post_id);

		if (!isset($post->ID) || empty($post->ID)):
			return;
		endif;

		$slug = get_page_template_slug($post->ID);
		$slug = str_replace(["-", "/"], "_", $slug);
		$slug = str_replace([".php"], "", $slug);

		do_action('_n_page_template_' . $slug);
	}

	/**
	 * Single post template.
	 *
	 * @since 0.0.1
	 */
	private function _n_add_templates_singular($post_id = 0){
		$post      = !$post_id ? $GLOBALS['post'] : get_post($post_id);
		$post_type = get_post_type($post);

		if (!isset($post->ID) || empty($post->ID) || is_page_template()):
			return;
		endif;

		do_action('_n_single_' . $post_type);
	}

	/**
	 * Product category template.
	 *
	 * @since 0.0.1
	 */
	private function _n_add_templates_product_category(){
		do_action('_n_product_cat');
	}

	/**
	 * Product tag template.
	 *
	 * @since 0.0.1
	 */
	private function _n_add_templates_product_tag(){
		do_action('_n_product_tag');
	}

	/**
	 * Shop template.
	 *
	 * @since 0.0.1
	 */
	private function _n_add_templates_shop(){
		do_action('_n_shop');
	}

	/**
	 * Post type archive template.
	 *
	 * @since 0.0.1
	 */
	private function _n_add_templates_post_type_archive($post_type = null){
		if (!$post_type):
			$post_type = $GLOBALS['wp_query']->get('post_type');
		endif;

		if ('post' === $post_type):
			return;
		endif;

		$type_object = get_post_type_object($post_type);

		if (!empty($type_object->has_archive)):
			do_action('_n_archive_' . $post_type);
		endif;
	}

	/**
	 * Category template.
	 *
	 * @since 0.0.1
	 */
	private function _n_add_templates_category(){
		do_action('_n_category');
	}

	/**
	 * Tag template.
	 *
	 * @since 0.0.1
	 */
	private function _n_add_templates_tag(){
		do_action('_n_tag');
	}

	/**
	 * Taxonomies template.
	 *
	 * @since 0.0.1
	 */
	private function _n_add_templates_tax(){
		$term = $GLOBALS['wp_query']->get_queried_object();
		$tax  = $term->taxonomy;

		do_action('_n_tax_' . $tax);
	}

	/**
	 * Template for date based archives.
	 *
	 * @since 0.0.1
	 */
	private function _n_add_templates_date(){
		do_action('_n_date');
	}

	/**
	 * Template for author archives.
	 *
	 * @since 0.0.1
	 */
	private function _n_add_templates_author(){
		do_action('_n_author');
	}
}
