<?php
/**
 * N Framework
 *
 * WARNING: This file is part of the core N Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @since      0.0.1
 * @package    N
 * @subpackage N/lib/functions
 */

if (!defined('ABSPATH')):
	exit; // Exit if accessed directly.
endif;

/**
 * Đếm lịch sử import
 *
 * @since 0.0.1
 */
function _n_count_import($history_id){
	$args = [
		'post_type'  => 'package',
		'meta_query' => [
			[
				'key'     => '_import_history',
				'value'   => $history_id,
				'compare' => '='
			]
		]
	];

	$query = new WP_Query($args);

	return $query->found_posts;
}

/**
 * Gửi thông báo qua telegram
 *
 * @since 0.0.1
 */
function _n_send_telegram_message($args){
	$url = "https://phplaravel-1100866-3856926.cloudwaysapps.com/api/code-push-telegram";

	$data = [
		'phone'      => $args['phone'],
		'date'       => $args['date'],
		'status'     => $args['status'],
		'channel'    => $args['channel'],
		'code'       => $args['code'],
		'is_success' => $args['is_success'],
		'price'      => $args['price'],
	];

	$response = wp_remote_post($url, [
		'method'  => 'POST',
		'headers' => [
			'Content-Type' => 'application/json',
		],
		'body'    => wp_json_encode($data),
	]);

	if (is_wp_error($response)):
		error_log('Telegram message sending failed: ' . $response->get_error_message());
	else:
		error_log('Telegram message sent successfully.');
	endif;
}

/**
 * Thu thập dữ liệu khách hàng
 *
 * @since 0.0.1
 */
function _n_create_client_data($args = []){
	if (!isset($args['phone']) || empty($args['phone'])):
		return false;
	endif;

	$client_data_args = [
		'post_type'   => 'client_data',
		'post_status' => 'publish',
		'post_title'  => $args['phone'],
	];

	$client_data_metas['_client_data_time']  = time();
	$client_data_metas['_client_data_phone'] = $args['phone'];

	if (isset($args['action'])):
		$client_data_metas['_client_data_action'] = $args['action'];
	endif;

	$client_data_id = wp_insert_post($client_data_args);

	if (!is_wp_error($client_data_id)):
		if (!empty($client_data_metas)):
			foreach ($client_data_metas as $meta_key => $meta_value):
				update_post_meta($client_data_id, $meta_key, $meta_value);
			endforeach;
		endif;

		return $client_data_id;
	endif;

	return false;
}

/**
 * Tự động xoá dữ liệu người dùng sau 48 tiếng
 *
 * @since 0.0.1
 */
function delete_posts_after_hours(){
	$twenty_four_hours_ago = date('Y-m-d H:i:s', strtotime('-48 hours'));

	$args = [
		'post_type'      => 'client_data',
		'posts_per_page' => - 1,
		'date_query'     => [
			[
				'before' => $twenty_four_hours_ago,
			],
		],
	];

	$posts = get_posts($args);

	if (!empty($posts)):
		foreach ($posts as $post):
			$post_meta_keys = get_post_custom_keys($post->ID);

			if ($post_meta_keys):
				foreach ($post_meta_keys as $meta_key):
					delete_post_meta($post->ID, $meta_key);
				endforeach;
			endif;

			wp_delete_post($post->ID, true);
		endforeach;
	endif;
}

add_action('wp', 'delete_posts_after_hours');

/**
 * Affiliate cookie
 */
function _n_affiliate_set_cookie(){
	if (isset($_GET['ref'])):
		$ref = $_GET['ref'];

		// Tính thời gian hết hạn sau một tháng
		$expiryTime = time() + 30 * 24 * 60 * 60;

		// Thiết lập cookie
		setcookie('_n_affiliate_ref', $ref, $expiryTime);
	endif;
}

_n_affiliate_set_cookie();

/**
 *
 */
function _n_schedule_get_transaction(){
	if (!wp_next_scheduled('_n_get_transaction_event')):
		if (strpos(wp_timezone_string(), "+") === false && strpos(wp_timezone_string(), "-") === false):
			date_default_timezone_set(wp_timezone_string());
		endif;

		wp_schedule_event(time(), '5minutes', '_n_get_transaction_event');
	endif;
}

add_action('init', '_n_schedule_get_transaction');

/**
 *
 */
function _n_get_transaction_event(){
	$transaction = _n_get_transaction_all_page();

	if (empty($transaction)):
		return;
	endif;

	$metas       = [];
	$transaction = array_reverse($transaction);

	date_default_timezone_set('Asia/Ho_Chi_Minh');

	foreach ($transaction as $transaction_item):
		$datetime = date_create_from_format('d/m/Y H:i', $transaction_item->date);
		$datetime = date_format($datetime, 'Y-m-d H:i:s');

		$phone = $transaction_item->phone_number;

		if (str_starts_with($phone, "84")):
			$phone = substr_replace($phone, "0", 0, 2);
		endif;

		$metas['_package_order_transaction_id'] = $transaction_item->transaction_id;
		$metas['_package_order_branch_id']      = $transaction_item->branch_id;
		$metas['_package_order_phone_number']   = $phone;
		$metas['_package_order_service']        = $transaction_item->service;
		$metas['_package_order_pack']           = $transaction_item->pack;
		$metas['_package_order_channel']        = $transaction_item->channel;
		$metas['_package_order_price']          = $transaction_item->price;
		$metas['_package_order_description']    = $transaction_item->description;
		$metas['_package_order_rate']           = $transaction_item->rate;
		$metas['_package_order_revenue']        = $transaction_item->revenue;
		$metas['_package_order_date']           = $datetime;
		$metas['_package_order_status']         = $transaction_item->status;
		$metas['_package_order_sub_agent']      = $transaction_item->sub_agent;
		$metas['_package_order_created_at']     = $transaction_item->created_at;
		$metas['_package_order_updated_at']     = $transaction_item->updated_at;

		$args = [
			'posts_per_page' => 1,
			'post_type'      => 'package_order',
			'meta_query'     => [
				[
					'key'     => '_package_order_transaction_id',
					'value'   => $metas['_package_order_transaction_id'],
					'compare' => '=',
				]
			]
		];

		$package_order_args = [
			'post_type'   => 'package_order',
			'post_status' => 'publish',
			'post_title'  => "#" . $metas['_package_order_transaction_id'] . " " . $metas['_package_order_phone_number'],
		];

		$posts = get_posts($args);

		if (!empty($posts)):
			$package_order_id = $posts[0]->ID;
		else:
			$package_order_id = wp_insert_post($package_order_args);
		endif;

		if (!is_wp_error($package_order_id)):
			if (!empty($metas)):
				foreach ($metas as $meta_key => $meta_value):
					update_post_meta($package_order_id, $meta_key, $meta_value);
				endforeach;
			endif;

			if ($transaction_item->status != 0 || $transaction_item->status != "0"):
				_n_create_cashback($package_order_id);
			endif;
		endif;

		usleep(100 * 1000);
	endforeach;
}

add_action('_n_get_transaction_event', '_n_get_transaction_event');

/**
 *
 */
function _n_get_ctv_transaction_event(){
	$items = _n_get_package_order_all_page();

	if (empty($items)):
		return;
	endif;

	$metas = [];
	$items = array_reverse($items);

	date_default_timezone_set('Asia/Ho_Chi_Minh');

	foreach ($items as $transaction_item):
		$metas['_package_order_transaction_id'] = $transaction_item->id;
		$metas['_package_order_branch_id']      = '';
		$metas['_package_order_phone_number']   = $transaction_item->msisdn;
		$metas['_package_order_service']        = '';
		$metas['_package_order_pack']           = $transaction_item->packageName;
		$metas['_package_order_channel']        = 'otp';
		$metas['_package_order_price']          = $transaction_item->packAmount;
		$metas['_package_order_description']    = $transaction_item->respContent;
		$metas['_package_order_rate']           = '';
		$metas['_package_order_revenue']        = $transaction_item->shareValue;
		$metas['_package_order_date']           = date("Y-m-d H:i:s", $transaction_item->regTime / 1000);
		$metas['_package_order_status']         = $transaction_item->status;
		$metas['_package_order_sub_agent']      = '';
		$metas['_package_order_created_at']     = '';
		$metas['_package_order_updated_at']     = '';

		$args = [
			'posts_per_page' => 1,
			'post_type'      => 'package_order',
			'meta_query'     => [
				[
					'key'     => '_package_order_transaction_id',
					'value'   => $metas['_package_order_transaction_id'],
					'compare' => '=',
				]
			]
		];

		$package_order_args = [
			'post_type'   => 'package_order',
			'post_status' => 'publish',
			'post_title'  => "#" . $metas['_package_order_transaction_id'] . " " . $metas['_package_order_phone_number'],
		];

		$posts = get_posts($args);

		if (!empty($posts)):
			$package_order_id = $posts[0]->ID;
		else:
			$package_order_id = wp_insert_post($package_order_args);
		endif;

		if (!is_wp_error($package_order_id)):
			if (!empty($metas)):
				foreach ($metas as $meta_key => $meta_value):
					update_post_meta($package_order_id, $meta_key, $meta_value);
				endforeach;
			endif;

			if ($transaction_item->status != 0 || $transaction_item->status != "0"):
				_n_create_cashback($package_order_id);
			endif;
		endif;

		usleep(100 * 1000);
	endforeach;
}

add_action('_n_get_transaction_event', '_n_get_ctv_transaction_event');

/**
 *
 */
function _n_get_transaction_intervals($schedules){
	$schedules['5minutes'] = [
		'interval' => 300,
		'display'  => __('Mỗi 5 phút')
	];

	return $schedules;
}

add_filter('cron_schedules', '_n_get_transaction_intervals');

function _n_generate_cookie($length = 32){
	$characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
	$licenseKey = '';

	for ($i = 0; $i < $length; $i ++):
		$licenseKey .= $characters[rand(0, strlen($characters) - 1)];
	endfor;

	return $licenseKey;
}

/**
 *
 */
function _n_create_cashback($order_id = false){
	if (!$order_id):
		return;
	endif;

	$phone   = get_post_meta($order_id, '_package_order_phone_number', true);
	$package = get_post_meta($order_id, '_package_order_pack', true);
	$date    = get_post_meta($order_id, '_package_order_date', true);


	if (str_starts_with($phone, "84")):
		$phone = substr_replace($phone, "0", 0, 2);
	endif;

	$package_args = [
		'posts_per_page' => 1,
		'post_type'      => 'package',
		'meta_query'     => [
			[
				'key'     => '_package_name',
				'value'   => $package,
				'compare' => '=',
			]
		]
	];

	$packages = get_posts($package_args);

	if (empty($packages)):
		return;
	endif;

	$package_id     = $packages[0]->ID;
	$package_refund = get_post_meta($package_id, '_package_refund', true);

	if (!is_numeric($package_refund)):
		$package_refund = 0;
	endif;

	$args = [
		'posts_per_page' => 1,
		'post_type'      => 'cashback',
		'meta_query'     => [
			[
				'key'     => '_cashback_order_id',
				'value'   => $order_id,
				'compare' => '=',
			]
		]
	];

	$posts = get_posts($args);

	if (empty($posts)):
		$cashback_id = wp_insert_post([
			'post_type'   => 'cashback',
			'post_status' => 'publish',
			'post_title'  => "#" . $phone . " " . $package,
		]);

		$cashback_metas                                = [];
		$cashback_metas['_cashback_order_id']          = $order_id;
		$cashback_metas['_cashback_phone']             = $phone;
		$cashback_metas['_cashback_package']           = $package;
		$cashback_metas['_cashback_package_date']      = $date;
		$cashback_metas['_cashback_amount']            = $package_refund;
		$cashback_metas['_cashback_amount_real']       = 0;
		$cashback_metas['_cashback_amount_processing'] = $package_refund;
		$cashback_metas['_cashback_status']            = 'processing';

		if ($package_refund == 0):
			$cashback_metas['_cashback_status'] = 'success';
		endif;

		if (!is_wp_error($cashback_id)):
			if (!empty($cashback_metas)):
				foreach ($cashback_metas as $meta_key => $meta_value):
					update_post_meta($cashback_id, $meta_key, $meta_value);
				endforeach;
			endif;
		endif;
	endif;
}
